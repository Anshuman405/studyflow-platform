generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks         Task[]
  events        Event[]
  notes         Note[]
  materials     Material[]
  reflections   Reflection[]
  studyStreaks  StudyStreak[]
  aiInsights    AiInsight[]
  timerSessions TimerSession[]
  colleges      College[] @relation("UserCreatedColleges")
  notifications Notification[]
  studyGroups   StudyGroupMember[]
  createdGroups StudyGroup[] @relation("StudyGroupCreator")
  assignedTasks GroupTask[] @relation("GroupTaskAssigner")
  authoredNotes GroupNote[] @relation("GroupNoteAuthor")

  @@map("users")
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  subject     String?
  startDate   DateTime?
  dueDate     DateTime?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  timerSessions TimerSession[]
  notifications Notification[]

  @@index([userId])
  @@index([dueDate])
  @@index([status])
  @@index([userId, status])
  @@index([userId, dueDate])
  @@map("tasks")
}

model Event {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  category    EventCategory @default(OTHER)
  location    String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([userId])
  @@index([date])
  @@index([category])
  @@index([userId, date])
  @@map("events")
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  tags      String[]
  color     String   @default("#ffffff")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([tags])
  @@index([title])
  @@index([userId, updatedAt])
  @@map("notes")
}

model Material {
  id        Int          @id @default(autoincrement())
  title     String
  type      MaterialType
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  mimeType  String?
  subject   String?
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subject])
  @@index([type])
  @@index([userId, createdAt])
  @@map("materials")
}

model Reflection {
  id                 Int      @id @default(autoincrement())
  date               DateTime @db.Date
  studyTimeBySubject Json     @default("{}")
  mood               Int?     @db.SmallInt
  notes              String?
  userId             String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
  @@map("reflections")
}

model StudyStreak {
  id        Int      @id @default(autoincrement())
  date      DateTime @db.Date
  count     Int      @default(1)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([date, userId])
  @@index([userId])
  @@index([date])
  @@index([userId, date])
  @@map("study_streaks")
}

model College {
  id             Int      @id @default(autoincrement())
  name           String   @unique
  location       String?
  acceptanceRate Float?
  avgGpa         Float?
  avgSat         Int?
  avgAct         Int?
  details        Json     @default("{}")
  createdBy      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  creator User @relation("UserCreatedColleges", fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([name])
  @@index([createdBy])
  @@index([acceptanceRate])
  @@map("colleges")
}

model AiInsight {
  id              Int      @id @default(autoincrement())
  userId          String
  subject         String?
  recommendations Json
  insightType     String // "weekly", "study_breakdown", "college_prediction", etc.
  createdAt       DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([insightType])
  @@index([createdAt])
  @@index([userId, insightType])
  @@index([userId, createdAt])
  @@map("ai_insights")
}

model TimerSession {
  id            Int      @id @default(autoincrement())
  taskId        Int?
  estimatedTime Int // in minutes
  actualTime    Int? // in minutes
  completed     Boolean  @default(false)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([taskId])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([userId, completed])
  @@map("timer_sessions")
}

model Notification {
  id        Int              @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType @default(REMINDER)
  read      Boolean          @default(false)
  userId    String
  taskId    Int?
  eventId   Int?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  task  Task?  @relation(fields: [taskId], references: [id], onDelete: Cascade)
  event Event? @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([userId, read])
  @@map("notifications")
}

model StudyGroup {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  code        String   @unique // Join code
  isPublic    Boolean  @default(false)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator User               @relation("StudyGroupCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members StudyGroupMember[]
  tasks   GroupTask[]
  notes   GroupNote[]

  @@index([code])
  @@index([createdBy])
  @@index([isPublic])
  @@map("study_groups")
}

model StudyGroupMember {
  id          Int                 @id @default(autoincrement())
  userId      String
  groupId     Int
  role        StudyGroupRole      @default(MEMBER)
  status      StudyGroupStatus    @default(ACTIVE)
  joinedAt    DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  group StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
  @@index([userId])
  @@index([groupId])
  @@index([status])
  @@map("study_group_members")
}

model GroupTask {
  id           Int          @id @default(autoincrement())
  title        String
  description  String?
  subject      String?
  dueDate      DateTime?
  priority     TaskPriority @default(MEDIUM)
  status       TaskStatus   @default(TODO)
  groupId      Int
  assignedById String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relations
  group      StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignedBy User       @relation("GroupTaskAssigner", fields: [assignedById], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([assignedById])
  @@index([dueDate])
  @@index([status])
  @@map("group_tasks")
}

model GroupNote {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  tags      String[]
  color     String   @default("#ffffff")
  groupId   Int
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  group  StudyGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  author User       @relation("GroupNoteAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([authorId])
  @@index([tags])
  @@index([title])
  @@map("group_notes")
}

model DataExport {
  id        Int            @id @default(autoincrement())
  userId    String
  type      DataExportType
  status    ExportStatus   @default(PENDING)
  fileUrl   String?
  fileName  String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("data_exports")
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum EventCategory {
  EXAM
  STUDY_SESSION
  ASSIGNMENT
  LAB
  OTHER
}

enum MaterialType {
  PDF
  DOC
  NOTE
  LINK
  IMAGE
  VIDEO
  OTHER
}

enum NotificationType {
  REMINDER
  DEADLINE
  GROUP_INVITE
  SYSTEM
}

enum StudyGroupRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum StudyGroupStatus {
  ACTIVE
  INACTIVE
  BANNED
}

enum DataExportType {
  FULL
  TASKS
  NOTES
  MATERIALS
  REFLECTIONS
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
